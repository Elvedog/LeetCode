class MinStack:

    def __init__(self):
        # Initialize two stacks:
        # stack to hold all elements
        # min_stack to hold the minimum element at each level of the stack
        self.stack = []
        self.min_stack = []
        

    def push(self, val: int) -> None:
        # Push the value onto the main stack
        self.stack.append(val)
        
        # If the min_stack is empty or the current value is smaller or equal to the top of min_stack,
        # push it onto the min_stack as the new minimum
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)
        else:
            # Otherwise, push the current minimum again to keep the stacks synchronized
            self.min_stack.append(self.min_stack[-1])

    def pop(self) -> None:
        # Pop the top element from both the stack and the min_stack
        self.stack.pop()
        self.min_stack.pop()

    def top(self) -> int:
        # Return the top element of the main stack
        return self.stack[-1]

    def getMin(self) -> int:
        # Return the top element of the min_stack which is the minimum element
        return self.min_stack[-1]
