#You are given an integer array piles where piles[i] is the number of bananas in the ith pile. You are also given an integer h, which represents the number of hours you have to eat all the bananas.

You may decide your bananas-per-hour eating rate of k. Each hour, you may choose a pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, you may finish eating the pile but you can not eat from another pile in the same hour.

Return the minimum integer k such that you can eat all the bananas within h hours.

from math import ceil
from typing import List

class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        # Define the search range for k (bananas per hour)
        left, right = 1, max(piles)
        
        # Function to check if it's possible to eat all bananas at speed k within h hours
        def canEatAll(k):
            total_hours = 0
            for pile in piles:
                # Calculate the hours needed to eat the current pile at speed k
                # ceil(pile / k) is the number of hours needed for this pile
                total_hours += ceil(pile / k)
            # Return True if total hours needed is less than or equal to h
            return total_hours <= h
        
        # Perform binary search to find the minimum k
        while left < right:
            mid = (left + right) // 2
            if canEatAll(mid):
                right = mid  # Try a smaller k if possible
            else:
                left = mid + 1  # Increase k since mid is too small
        
        # The loop ends when left == right, which is the minimum k
        return left
