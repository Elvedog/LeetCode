You are given the beginning of a linked list head, and an integer n.
Remove the nth node from the end of the list and return the beginning of the list.

# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:
        # Step 1: Create a dummy node to handle edge cases like removing the first node
        dummy = ListNode(0)
        dummy.next = head
        
        # Step 2: Initialize two pointers, both starting at the dummy node
        first = dummy
        second = dummy
        
        # Step 3: Move the first pointer n+1 steps ahead to maintain a gap of n between first and second
        for _ in range(n + 1):
            first = first.next
        
        # Step 4: Move both pointers until first reaches the end of the list
        while first:
            first = first.next
            second = second.next
        
        # Step 5: Remove the nth node from the end by adjusting the next pointer
        second.next = second.next.next
        
        # Step 6: Return the head of the modified list
        return dummy.next
