class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # Dictionary to store the last seen index of each character
        char_index_map = {}
        # Initialize the left pointer of the sliding window and the maximum length
        left = 0
        max_length = 0
        
        # Iterate over the string using the right pointer
        for right in range(len(s)):
            # If the character at right pointer is already in the map and within the current window
            if s[right] in char_index_map and char_index_map[s[right]] >= left:
                # Move the left pointer to the right of the last occurrence of the current character
                left = char_index_map[s[right]] + 1
            
            # Update the last seen index of the current character
            char_index_map[s[right]] = right
            
            # Calculate the length of the current window and update max_length if it's the longest so far
            max_length = max(max_length, right - left + 1)
        
        # Return the maximum length found
        return max_length
