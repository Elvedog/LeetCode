from typing import List

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        # Initialize the list to store all valid combinations
        result = []
        
        # Helper function for backtracking
        def backtrack(current_str, open_count, close_count):
            # If the current string length equals 2 * n, it's a valid combination
            if len(current_str) == 2 * n:
                result.append(current_str)
                return
            
            # If we can add an opening parenthesis, do it
            if open_count < n:
                backtrack(current_str + '(', open_count + 1, close_count)
            
            # If we can add a closing parenthesis, do it
            if close_count < open_count:
                backtrack(current_str + ')', open_count, close_count + 1)
        
        # Start the backtracking process with an empty string and zero counts for open and close
        backtrack("", 0, 0)
        
        return result
