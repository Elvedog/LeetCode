from typing import List

class Solution:
    def maxArea(self, heights: List[int]) -> int:
        # Initialize two pointers, one at the beginning (left) and one at the end (right) of the array
        left = 0
        right = len(heights) - 1
        
        # Initialize a variable to keep track of the maximum area found so far
        max_area = 0
        
        # Continue the loop until the left pointer meets the right pointer
        while left < right:
            # Calculate the height of the water container as the smaller of the two heights at the left and right pointers
            height = min(heights[left], heights[right])
            
            # Calculate the width of the water container as the distance between the left and right pointers
            width = right - left
            
            # Calculate the area of the water container (height * width)
            area = height * width
            
            # Update the maximum area found so far, if the current area is larger
            max_area = max(max_area, area)
            
            # Move the pointer pointing to the shorter bar inward:
            # - If the height at the left pointer is less than the height at the right pointer,
            #   move the left pointer one step to the right to potentially find a taller bar.
            # - Otherwise, move the right pointer one step to the left.
            if heights[left] < heights[right]:
                left += 1
            else:
                right -= 1
        
        # After the loop completes, return the maximum area found
        return max_area

        
