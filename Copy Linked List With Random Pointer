You are given the head of a linked list of length n. Unlike a singly linked list, each node contains an additional pointer random, which may point to any node in the list, or null.
Create a deep copy of the list.
The deep copy should consist of exactly n new nodes, each including:
The original value val of the copied node
A next pointer to the new node corresponding to the next pointer of the original node
A random pointer to the new node corresponding to the random pointer of the original node
Note: None of the pointers in the new list should point to nodes in the original list.
Return the head of the copied linked list.
In the examples, the linked list is represented as a list of n nodes. Each node is represented as a pair of [val, random_index] where random_index is the index of the node (0-indexed) that the random pointer points to, or null if it does not point to any node.

class Node:
    def __init__(self, val: int, next: 'Node' = None, random: 'Node' = None):
        self.val = val
        self.next = next
        self.random = random

class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        if not head:
            return None
        
        # Step 1: Create new nodes and interweave them with the original nodes
        current = head
        while current:
            # Clone the current node and place it right after the original node
            new_node = Node(current.val, current.next)
            current.next = new_node
            current = new_node.next
        
        # Step 2: Set up random pointers for the cloned nodes
        current = head
        while current:
            if current.random:
                # Set the random pointer for the clone
                current.next.random = current.random.next
            current = current.next.next  # Move to the next original node
        
        # Step 3: Separate the original list from the cloned list
        current = head
        clone_head = head.next  # This will be the head of the cloned list
        while current:
            clone = current.next
            current.next = clone.next  # Restore the original list's next pointer
            if clone.next:
                clone.next = clone.next.next  # Set the next pointer for the clone
            current = current.next
        
        return clone_head
