Given an array of integers numbers that is sorted in non-decreasing order.
Return the indices (1-indexed) of two numbers, [index1, index2], such that they add up to a given target number target and index1 < index2. Note that index1 and index2 cannot be equal, therefore you may not use the same element twice.
There will always be exactly one valid solution.
Your solution must use 
O(1) additional space.

from typing import List
       # Initialize two pointers
        left = 0
 
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        right = len(numbers) - 1
        
        # Iterate until the two pointers meet
        while left < right:
            # Calculate the sum of the numbers at the two pointers
            current_sum = numbers[left] + numbers[right]
            
            if current_sum == target:
                # Return the 1-indexed positions of the two numbers
                return [left + 1, right + 1]
            elif current_sum < target:
                # Move the left pointer to the right
                left += 1
            else:
                # Move the right pointer to the left
                right -= 1
                
        # In case no solution is found (should not happen as there is always one valid solution)
        return []

        
