#You are given a string s consisting of the following characters: '(', ')', '{', '}', '[' and ']'.
The input string s is valid if and only if:
Every open bracket is closed by the same type of close bracket.
Open brackets are closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
Return true if s is a valid string, and false otherwise.

class Solution:
    def isValid(self, s: str) -> bool:
        # Dictionary to map each closing bracket to its corresponding opening bracket
        bracket_map = {')': '(', '}': '{', ']': '['}
        
        # Stack to keep track of the opening brackets encountered in the string
        stack = []
        
        # Iterate through each character in the input string
        for char in s:
            # If the character is a closing bracket
            if char in bracket_map:
                # Pop the top element from the stack if it's not empty; otherwise, use a dummy value '#'
                top_element = stack.pop() if stack else '#'
                
                # Check if the popped element matches the corresponding opening bracket
                if bracket_map[char] != top_element:
                    # If it doesn't match, the string is invalid
                    return False
            else:
                # If it's an opening bracket, push it onto the stack
                stack.append(char)
        
        # If the stack is empty after processing all characters, the string is valid
        # If the stack is not empty, it means there are unmatched opening brackets
        return not stack
