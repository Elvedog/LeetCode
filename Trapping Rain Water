You are given an array non-negative integers heights which represent an elevation map. Each value heights[i] represents the height of a bar, which has a width of 1.
Return the maximum area of water that can be trapped between the bars.

from typing import List

class Solution:
    def trap(self, heights: List[int]) -> int:
        # If the heights list is empty, there is no water to trap
        if not heights:
            return 0
        
        # Initialize two pointers: one at the start (left) and one at the end (right) of the array
        left, right = 0, len(heights) - 1
        
        # Initialize variables to track the maximum heights encountered so far from the left and right
        left_max, right_max = heights[left], heights[right]
        
        # Initialize the variable to accumulate the total amount of trapped water
        trapped_water = 0
        
        # Continue the loop until the left pointer meets or crosses the right pointer
        while left < right:
            # If the height at the left pointer is less than the height at the right pointer,
            # we consider the left side for trapping water
            if heights[left] < heights[right]:
                # If the current height at the left pointer is greater than or equal to left_max,
                # update left_max to the current height, as this becomes the new barrier
                if heights[left] >= left_max:
                    left_max = heights[left]
                else:
                    # Otherwise, water can be trapped at the current left pointer position
                    # The amount of water trapped is the difference between left_max and the current height
                    trapped_water += left_max - heights[left]
                # Move the left pointer to the right
                left += 1
            else:
                # If the height at the right pointer is less than or equal to the height at the left pointer,
                # we consider the right side for trapping water
                if heights[right] >= right_max:
                    # If the current height at the right pointer is greater than or equal to right_max,
                    # update right_max to the current height, as this becomes the new barrier
                    right_max = heights[right]
                else:
                    # Otherwise, water can be trapped at the current right pointer position
                    # The amount of water trapped is the difference between right_max and the current height
                    trapped_water += right_max - heights[right]
                # Move the right pointer to the left
                right -= 1
        
        # After the loop completes, return the total amount of trapped water
        return trapped_water
