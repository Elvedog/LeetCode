There are n cars traveling to the same destination on a one-lane highway.
You are given two arrays of integers position and speed, both of length n.
position[i] is the position of the ith car (in miles)
speed[i] is the speed of the ith car (in miles per hour)
The destination is at position target miles.
A car can not pass another car ahead of it. It can only catch up to another car and then drive at the same speed as the car ahead of it.
A car fleet is a non-empty set of cars driving at the same position and same speed. A single car is also considered a car fleet.
If a car catches up to a car fleet the moment the fleet reaches the destination, then the car is considered to be part of the fleet.
Return the number of different car fleets that will arrive at the destination.

from typing import List

class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        # Pair up position and speed, then sort them by position in descending order
        cars = sorted(zip(position, speed), reverse=True)
        
        fleets = 0  # Number of fleets
        time_to_reach_destination = 0  # Time taken by the last fleet to reach the destination
        
        for pos, spd in cars:
            # Calculate time to reach the destination for the current car
            current_time = (target - pos) / spd
            
            # If the current car takes more time than the last one (in time_to_reach_destination),
            # it forms a new fleet
            if current_time > time_to_reach_destination:
                fleets += 1
                time_to_reach_destination = current_time
        
        return fleets
