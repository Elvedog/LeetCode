You are given a string s consisting of only uppercase english characters and an integer k. You can choose up to k characters of the string and replace them with any other uppercase English character.
After performing at most k replacements, return the length of the longest substring which contains only one distinct character.

from collections import defaultdict

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        # Dictionary to store the frequency of characters in the current window
        char_count = defaultdict(int)
        # Initialize pointers for the sliding window and variables for tracking the max frequency and max length
        left = 0
        max_freq = 0
        max_length = 0
        
        # Iterate over the string using the right pointer
        for right in range(len(s)):
            # Increment the frequency of the current character
            char_count[s[right]] += 1
            
            # Update max_freq to be the maximum frequency of any character in the current window
            max_freq = max(max_freq, char_count[s[right]])
            
            # Calculate the number of characters that need to be replaced
            if (right - left + 1) - max_freq > k:
                # If replacements exceed k, shrink the window from the left
                char_count[s[left]] -= 1
                left += 1
            
            # Update the maximum length of a valid window found so far
            max_length = max(max_length, right - left + 1)
        
        # Return the maximum length found
        return max_length
