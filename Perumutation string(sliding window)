from collections import Counter

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        # Lengths of the strings
        len_s1, len_s2 = len(s1), len(s2)
        
        # If s1 is longer than s2, s2 cannot contain a permutation of s1
        if len_s1 > len_s2:
            return False
        
        # Create frequency counters for s1 and the first window in s2
        s1_count = Counter(s1)
        window_count = Counter(s2[:len_s1])
        
        # Check if the first window matches the frequency count of s1
        if s1_count == window_count:
            return True
        
        # Now slide the window across s2
        for i in range(len_s1, len_s2):
            # Include the next character in the window
            window_count[s2[i]] += 1
            
            # Remove the character that's no longer in the window
            left_char = s2[i - len_s1]
            if window_count[left_char] == 1:
                del window_count[left_char]
            else:
                window_count[left_char] -= 1
            
            # Compare the window with s1's frequency count
            if s1_count == window_count:
                return True
        
        # If no matching window is found
        return False
