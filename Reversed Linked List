Given the beginning of a singly linked list head, reverse the list, and return the new beginning of the list.


class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Initialize the previous node as None (this will be the new head)
        prev = None
        # Start with the current node as the head of the list
        current = head
        
        # Iterate through the linked list
        while current is not None:
            # Store the next node temporarily
            next_node = current.next
            # Reverse the current node's pointer to point to the previous node
            current.next = prev
            # Move the previous node to the current node
            prev = current
            # Move the current node to the next node in the original list
            current = next_node
        
        # At the end, prev will be the new head of the reversed list
        return prev
