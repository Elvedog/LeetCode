#You are given an array of length n which was originally sorted in ascending order. It has now been rotated between 1 and n times. For example, the array nums = [1,2,3,4,5,6] might become:

[3,4,5,6,1,2] if it was rotated 4 times.
[1,2,3,4,5,6] if it was rotated 6 times.
Notice that rotating the array 4 times moves the last four elements of the array to the beginning. Rotating the array 6 times produces the original array.

Assuming all elements in the rotated sorted array nums are unique, return the minimum element of this array.

A solution that runs in O(n) time is trivial, can you write an algorithm that runs in O(log n) time?

from typing import List

class Solution:
    def findMin(self, nums: List[int]) -> int:
        # Initialize the left and right pointers for binary search
        left, right = 0, len(nums) - 1
        
        # Continue the search while the window has more than one element
        while left < right:
            # Find the middle index
            mid = (left + right) // 2
            
            # If the mid element is greater than the rightmost element,
            # it means the smallest value is in the right half
            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                # Otherwise, the smallest value is in the left half (or is mid itself)
                right = mid
        
        # When the loop exits, left and right converge to the smallest element
        return nums[left]
